5.-

cuenta cuantos 0 hay en una lista


(define lst1 (list 0 0 1))

(define (cuenta list)
  [cond
    [(null? list) 0] ; si la lista es vacia retorna 0
    [(= (first list) 0) (+ 1 (cuenta (rest list)))] ; compara el primer valor, si es 0 aumenta contador 
    [else (cuenta (rest list))] ; si no pasa a la siguiente pos
  ]
)

(write (cuenta lst1))

resultado 

(0 0 1)2

10.-

remplaza un atom con el valor d otro en una lista


(define (replace v1 v2 lst)
      (if (null? lst ) '()
          (if (eqv? (car lst) v1) ; compara el primer valor d la lista
              (cons v2 (replace v1 v2 (cdr lst))) ; si es igual hace el reemplazo
           (cons (car lst) (replace v1 v2 (cdr lst))) ; caso contrario avanza a la siguiente pos
          )
      )
)


(write (replace 'a 'b '(p a l a)))

resultado  

(p b l b)


15.-

retorna una lista sin el segundo nivel


(define lst2 (list 1 (3 3 3) (2 2 2) 2))

(define (remlevel lst2)
    (if (null? (cdr (car lst2))); verifica si existe segundo nivel
        (remlevel (cdr lst)); de no existis va a la siguiente pos
        (list (list (car lst2) (cdr(cdr lst2)) (remlevel (cdr lst2))); si existe elimina la sub lista

(write (remlevel lst2))


20.-

recursiva por atras

(define (doit n alm)
	    (if (= n 0); si es 0 retorna alm
	        alm
	        (doit (- n 1) (+ n alm); guarda los valores de la suma en alm
	    )
	)